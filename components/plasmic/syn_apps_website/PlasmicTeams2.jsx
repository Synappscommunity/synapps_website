/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqCYb2b7hLWP5fdSvXKe7g
// Component: VFq-mItDTtzM
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vqCYb2b7hLWP5fdSvXKe7g/projectcss
import sty from "./PlasmicTeams2.module.css"; // plasmic-import: VFq-mItDTtzM/css

createPlasmicElementProxy;

export const PlasmicTeams2__VariantProps = new Array();

export const PlasmicTeams2__ArgProps = new Array(
  "icon",
  "title",
  "subtitle",
  "description"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTeams2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__k965M)}>
        <div className={classNames(projectcss.all, sty.freeBox___8AEDg)}>
          {renderPlasmicSlot({
            defaultContents: (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jeRwq)}
                displayHeight={"auto"}
                displayMaxHeight={"64px"}
                displayMaxWidth={"64px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/syn_apps_website/images/teamPng.png",
                  fullWidth: 128,
                  fullHeight: 128,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.icon
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___1W3Yt)}>
          {renderPlasmicSlot({
            defaultContents: "Jocylne Kujo",
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__aViAi)}>
          {renderPlasmicSlot({
            defaultContents: "Founder Flappin",
            value: args.subtitle,
            className: classNames(sty.slotTargetSubtitle)
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__uqtfW)}>
          {renderPlasmicSlot({
            defaultContents:
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex.",
            value: args.description,
            className: classNames(sty.slotTargetDescription)
          })}
          <div className={classNames(projectcss.all, sty.freeBox__qqa2U)} />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeams2__ArgProps,
          internalVariantPropNames: PlasmicTeams2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTeams2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeams2";
  } else {
    func.displayName = `PlasmicTeams2.${nodeName}`;
  }
  return func;
}

export const PlasmicTeams2 = Object.assign(
  // Top-level PlasmicTeams2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTeams2
    internalVariantProps: PlasmicTeams2__VariantProps,
    internalArgProps: PlasmicTeams2__ArgProps
  }
);

export default PlasmicTeams2;
/* prettier-ignore-end */
