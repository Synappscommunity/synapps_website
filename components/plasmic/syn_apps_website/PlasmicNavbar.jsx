/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqCYb2b7hLWP5fdSvXKe7g
// Component: JlZE_UpCnEsq
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Logo from "../../Logo"; // plasmic-import: sRn2-bHz6HgN/component
import Button from "../../Button"; // plasmic-import: qDkIQgIGzzHX/component
import { useScreenVariants as useScreenVariantsunNaIs43VvNf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UNNaIS43VvNF/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vqCYb2b7hLWP5fdSvXKe7g/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: JlZE_UpCnEsq/css

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsunNaIs43VvNf()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__cUmmR)}
      >
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo)}
          largeLogo={
            hasVariant(globalVariants, "screen", "mobile") ? undefined : true
          }
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lyfoh)}
        >
          {false ? (
            <Button
              className={classNames("__wab_instance", sty.button___9W8Ui)}
              color={"navLink"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__y88J2)}
                  role={"img"}
                />
              }
              link={"#"}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__l2PCu)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___95Lhb
                )}
              >
                {"FAQs"}
              </div>
            </Button>
          ) : null}
          {false ? (
            <Button
              className={classNames("__wab_instance", sty.button__tChCb)}
              color={"navLink"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg___0C2Nw)}
                  role={"img"}
                />
              }
              link={"#"}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__jv4Ca)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u9Tf1
                )}
              >
                {"How it Work"}
              </div>
            </Button>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? false : false) ? (
            <Button
              data-plasmic-name={"inLabData"}
              data-plasmic-override={overrides.inLabData}
              className={classNames("__wab_instance", sty.inLabData)}
              color={
                hasVariant(globalVariants, "screen", "mobile")
                  ? "navLink"
                  : "navLink"
              }
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__bvT7W)}
                  role={"img"}
                />
              }
              link={
                "https://docs.google.com/document/d/10F3FLqwHg_CoSRwzga1eqpCS8Pu2r0xajaPR1Qi6FAQ/edit"
              }
              outline={
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : undefined
              }
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__jpF0Z)}
                  role={"img"}
                />
              }
              submitsForm={true}
              target={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yIz3Q
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 600 }}
                  >
                    {"InLabData"}
                  </span>
                </React.Fragment>
              </div>
            </Button>
          ) : null}
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aWzS)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__s92YV)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___510Tu)}
                role={"img"}
              />
            }
            link={
              "https://docs.google.com/forms/d/e/1FAIpQLSeu0cmLx9Vi16cV3WvJcys-8ctYElF3vQUGy1QVcbWhuaIHOA/viewform?usp=sf_link"
            }
            outline={true}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__hmx6V)}
                role={"img"}
              />
            }
            submitsForm={true}
            target={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rksXc
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 600 }}
                >
                  {"\u062a\u0633\u062a \u06a9\u0646\u06cc\u062f"}
                </span>
              </React.Fragment>
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__mb8Fs)}
            color={"navLinkBlue"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__mBU2)}
                role={"img"}
              />
            }
            link={
              "https://docs.google.com/forms/d/e/1FAIpQLScLcMumZPoiqRjH4NgAfzjx0gkoHd46j2x6_VjBMQSMDKJOpQ/viewform?usp=sf_link"
            }
            onClick={async event => {
              const $steps = {};
            }}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__zlGd)}
                role={"img"}
              />
            }
            submitsForm={false}
            target={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j2CxW
              )}
            >
              {
                "\u0631\u0627\u0647 \u0627\u0646\u062f\u0627\u0632\u064a \u062f\u0631 \u0628\u064a\u0645\u0627\u0631\u0633\u062a\u0627\u0646 \u062c\u062f\u064a\u062f"
              }
            </div>
          </Button>
        </Stack__>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo", "inLabData"],
  logo: ["logo"],
  inLabData: ["inLabData"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    inLabData: makeNodeComponent("inLabData"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
