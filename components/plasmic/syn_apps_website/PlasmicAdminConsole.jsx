/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqCYb2b7hLWP5fdSvXKe7g
// Component: ZllxQYrS4va2
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: qDkIQgIGzzHX/component
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import TextInput from "../../TextInput"; // plasmic-import: H5mAYWyWYBfw/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { useScreenVariants as useScreenVariantsunNaIs43VvNf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UNNaIS43VvNF/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vqCYb2b7hLWP5fdSvXKe7g/projectcss
import sty from "./PlasmicAdminConsole.module.css"; // plasmic-import: ZllxQYrS4va2/css
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: WNXItNZeyPBz/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: X6yfQQfulV5Q/icon
import HamburgerIcon from "./icons/PlasmicIcon__Hamburger"; // plasmic-import: L3-2b3legiGN/icon
import Icons8CloseSvgIcon from "./icons/PlasmicIcon__Icons8CloseSvg"; // plasmic-import: 1NVXGA7OHLvh/icon
import Icons8CloseWindow50SvgIcon from "./icons/PlasmicIcon__Icons8CloseWindow50Svg"; // plasmic-import: ovHmcodcZzAz/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jjQ9fZu8jJX0/icon
import LockPasswordSvgrepoComSvgIcon from "./icons/PlasmicIcon__LockPasswordSvgrepoComSvg"; // plasmic-import: 3799jChm8Q-m/icon

createPlasmicElementProxy;

export const PlasmicAdminConsole__VariantProps = new Array();

export const PlasmicAdminConsole__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminConsole__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "phoneNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "loginGetSubscriptionDetail",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsunNaIs43VvNf()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAdminConsole.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAdminConsole.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAdminConsole.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yorP)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"2em"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"8em"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
                src={{
                  src: "/plasmic/syn_apps_website/images/logoSynappsTransparentPng.png",
                  fullWidth: 1464,
                  fullHeight: 376,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobile") ? false : true
              ) ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__as19T)}
                />
              ) : null}
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__gs65Y)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__nShN
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Button
                    className={classNames("__wab_instance", sty.button__ylNoe)}
                    color={undefined}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__ldPx)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__sWupo)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wQ0Va
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                </div>
              ) : null}
              <div
                data-plasmic-name={"menuTitle"}
                data-plasmic-override={overrides.menuTitle}
                className={classNames(projectcss.all, sty.menuTitle)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rmWwF
                  )}
                >
                  {"\u0645\u0646\u0648"}
                </div>
                <HamburgerIcon
                  className={classNames(projectcss.all, sty.svg__iEm9)}
                  role={"img"}
                />
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"mobileMenu"}
              data-plasmic-override={overrides.mobileMenu}
              hasGap={true}
              className={classNames(projectcss.all, sty.mobileMenu)}
            >
              <Icons8CloseSvgIcon
                className={classNames(projectcss.all, sty.svg__qG38)}
                role={"img"}
              />

              <AntdMenu
                data-plasmic-name={"menu"}
                data-plasmic-override={overrides.menu}
                className={classNames("__wab_instance", sty.menu)}
                expandIcon={
                  <Icons8CloseWindow50SvgIcon
                    className={classNames(projectcss.all, sty.svg__mMqC1)}
                    role={"img"}
                  />
                }
              >
                <AntdMenuItem
                  data-plasmic-name={
                    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo3"
                  }
                  data-plasmic-override={overrides.تستکنيدDemo3}
                  className={classNames("__wab_instance", sty.تستکنيدDemo3)}
                  danger={false}
                  key={"menuItemKey1"}
                >
                  <Button
                    data-plasmic-name={
                      "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2"
                    }
                    data-plasmic-override={overrides.تستکنيدDemo2}
                    className={classNames("__wab_instance", sty.تستکنيدDemo2)}
                    color={"blueBorder"}
                    link={
                      "https://docs.google.com/forms/d/e/1FAIpQLSeu0cmLx9Vi16cV3WvJcys-8ctYElF3vQUGy1QVcbWhuaIHOA/viewform?usp=sf_link"
                    }
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__nKqVg)}
                        role={"img"}
                      />
                    }
                    submitsForm={false}
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8KO9D
                      )}
                      dir={"rtl"}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 600 }}
                        >
                          {"\u062a\u0633\u062a \u06a9\u0646\u064a\u062f (Demo)"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Button>
                </AntdMenuItem>
                <AntdMenuItem
                  data-plasmic-name={
                    "\u0648\u0631\u0648\u062f\u0628\u0647\u0627\u064a\u0646\u0644\u0628"
                  }
                  data-plasmic-override={overrides.ورودبهاينلب}
                  className={classNames("__wab_instance", sty.ورودبهاينلب)}
                  key={"menuItemKey1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nMOfc
                    )}
                  >
                    {
                      "\u0648\u0631\u0648\u062f \u0628\u0647 \u0627\u064a\u0646\u0644\u0628"
                    }
                  </div>
                </AntdMenuItem>
                <AntdMenuItem
                  data-plasmic-name={
                    "\u062f\u064a\u0648\u0627\u0631\u0639\u0634\u0642"
                  }
                  data-plasmic-override={overrides.ديوارعشق}
                  className={classNames("__wab_instance", sty.ديوارعشق)}
                  key={"menuItemKey1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iE4L
                    )}
                  >
                    {"\u062f\u064a\u0648\u0627\u0631 \u0639\u0634\u0642"}
                  </div>
                </AntdMenuItem>
                <AntdMenuItem
                  data-plasmic-name={
                    "\u0642\u064a\u0645\u062a\u06af\u0630\u0627\u0631\u064a"
                  }
                  data-plasmic-override={overrides.قيمتگذاري}
                  className={classNames("__wab_instance", sty.قيمتگذاري)}
                  key={"menuItemKey1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vOvJe
                    )}
                  >
                    {"\u0642\u064a\u0645\u062a \u06af\u0630\u0627\u0631\u064a"}
                  </div>
                </AntdMenuItem>
                <AntdMenuItem
                  data-plasmic-name={
                    "\u0633\u0648\u0627\u0644\u0627\u062a\u0634\u0627\u064a\u0639"
                  }
                  data-plasmic-override={overrides.سوالاتشايع}
                  className={classNames("__wab_instance", sty.سوالاتشايع)}
                  key={"menuItemKey1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qw19P
                    )}
                  >
                    {
                      "\u0633\u0648\u0627\u0644\u0627\u062a \u0634\u0627\u064a\u0639"
                    }
                  </div>
                </AntdMenuItem>
                <AntdMenuItem
                  data-plasmic-name={
                    "\u062f\u0631\u0628\u0627\u0631\u0647\u0633\u06cc\u0646\u0627\u067e\u0633"
                  }
                  data-plasmic-override={overrides.دربارهسیناپس}
                  className={classNames("__wab_instance", sty.دربارهسیناپس)}
                  key={"menuItemKey1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zGkG1
                    )}
                  >
                    {
                      "\u062f\u0631\u0628\u0627\u0631\u0647 \u0633\u06cc\u0646\u0627\u067e\u0633"
                    }
                  </div>
                </AntdMenuItem>
              </AntdMenu>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"inputStack"}
            data-plasmic-override={overrides.inputStack}
            hasGap={true}
            className={classNames(projectcss.all, sty.inputStack)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mayps
              )}
              dir={"rtl"}
            >
              {
                "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0648 \u067e\u0633\u0648\u0631\u062f \u0627\u062f\u0645\u06cc\u0646 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
              }
            </div>
            <TextInput
              data-plasmic-name={"phoneNumber"}
              data-plasmic-override={overrides.phoneNumber}
              className={classNames("__wab_instance", sty.phoneNumber)}
              endIcon={
                <Icons8CloseSvgIcon
                  className={classNames(projectcss.all, sty.svg__iJeu)}
                  role={"img"}
                />
              }
              name={``}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["phoneNumber", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u064a\u0644"
              }
              required={false}
              showStartIcon={true}
              startIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___4T8Ij)}
                  role={"img"}
                />
              }
              type={"text"}
              value={
                generateStateValueProp($state, ["phoneNumber", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"password"}
              data-plasmic-override={overrides.password}
              aria-label={``}
              className={classNames("__wab_instance", sty.password)}
              endIcon={
                <Icons8CloseSvgIcon
                  className={classNames(projectcss.all, sty.svg__xtMCd)}
                  role={"img"}
                />
              }
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["password", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"}
              required={false}
              showStartIcon={true}
              startIcon={
                <LockPasswordSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__kz6B1)}
                  role={"img"}
                />
              }
              type={"password"}
              value={
                generateStateValueProp($state, ["password", "value"]) ?? ""
              }
            />

            <Button
              data-plasmic-name={"loginButton"}
              data-plasmic-override={overrides.loginButton}
              className={classNames("__wab_instance", sty.loginButton)}
              color={"blue"}
              onClick={async event => {
                const $steps = {};
                $steps["updateGetSubscriptionDetailLogin"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loginGetSubscriptionDetail"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateGetSubscriptionDetailLogin"] != null &&
                  typeof $steps["updateGetSubscriptionDetailLogin"] ===
                    "object" &&
                  typeof $steps["updateGetSubscriptionDetailLogin"].then ===
                    "function"
                ) {
                  $steps["updateGetSubscriptionDetailLogin"] = await $steps[
                    "updateGetSubscriptionDetailLogin"
                  ];
                }
              }}
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uSiV8
                )}
              >
                {"\u0648\u0631\u0648\u062f"}
              </div>
            </Button>
          </Stack__>
          <DataFetcher
            data-plasmic-name={"getSubscriptionDetail"}
            data-plasmic-override={overrides.getSubscriptionDetail}
            className={classNames("__wab_instance", sty.getSubscriptionDetail)}
            dataName={"GET subscription_detail_Data"}
            errorDisplay={null}
            errorName={"GET subscription_detail_Error"}
            headers={(() => {
              try {
                return { psw: "$state.password.value" };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            loadingDisplay={null}
            method={"GET"}
            noLayout={false}
            url={`https://n8n.synappsgroup.com/webhook/subscription_detail?phone_number=${$state.phoneNumber.value}`}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $state.loginGetSubscriptionDetail &&
                        $state.phoneNumber.value != "" &&
                        $state.password.value != "" &&
                        $ctx["GET subscription_detail_Data"][0].response_status
                          .code === 200
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__myxnz)}
                      dir={"rtl"}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"hospitalName"}
                        data-plasmic-override={overrides.hospitalName}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.hospitalName)}
                      >
                        <div
                          data-plasmic-name={"title"}
                          data-plasmic-override={overrides.title}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ihQ91
                          )}
                        >
                          {""}
                        </div>
                        <div
                          data-plasmic-name={"value"}
                          data-plasmic-override={overrides.value}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.value
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx["GET subscription_detail_Data"][0]
                                  .hospital_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"hospitalSize"}
                        data-plasmic-override={overrides.hospitalSize}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.hospitalSize)}
                      >
                        <div
                          data-plasmic-name={"title5"}
                          data-plasmic-override={overrides.title5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title5
                          )}
                        >
                          {
                            "\u0627\u0646\u062f\u0627\u0632\u0647 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9X9A3
                          )}
                        >
                          {""}
                        </div>
                        <div
                          data-plasmic-name={"value5"}
                          data-plasmic-override={overrides.value5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.value5
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return ($state.hospitalSize =
                                  $ctx["GET subscription_detail_Data"][0]
                                    .hospital_size === 3
                                    ? "بزرگ"
                                    : $ctx["GET subscription_detail_Data"][0]
                                        .hospital_size === 2
                                    ? "متوسط"
                                    : "کوچک");
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"subscriptionState"}
                        data-plasmic-override={overrides.subscriptionState}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.subscriptionState
                        )}
                      >
                        <div
                          data-plasmic-name={"title2"}
                          data-plasmic-override={overrides.title2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title2
                          )}
                        >
                          {
                            "\u0648\u0636\u0639\u06cc\u062a \u0627\u0634\u062a\u0631\u0627\u06a9"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gpZh4
                          )}
                        >
                          {""}
                        </div>
                        <div
                          data-plasmic-name={"value2"}
                          data-plasmic-override={overrides.value2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.value2
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx["GET subscription_detail_Data"][0][
                                  "subscription state"
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"paymentState"}
                        data-plasmic-override={overrides.paymentState}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.paymentState)}
                      >
                        <div
                          data-plasmic-name={"title7"}
                          data-plasmic-override={overrides.title7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title7
                          )}
                        >
                          {
                            "\u0648\u0636\u0639\u06cc\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__muiLe
                          )}
                        >
                          {""}
                        </div>
                        <div
                          data-plasmic-name={"value7"}
                          data-plasmic-override={overrides.value7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.value7
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  return $ctx[
                                    "GET subscription_detail_Data"
                                  ][0]["subscription state"].includes("paid")
                                    ? "پرداخت شده"
                                    : "پرداخت نشده";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"subscriptionExpirationDate"}
                        data-plasmic-override={
                          overrides.subscriptionExpirationDate
                        }
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.subscriptionExpirationDate
                        )}
                      >
                        <div
                          data-plasmic-name={"title3"}
                          data-plasmic-override={overrides.title3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title3
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0627\u062a\u0645\u0627\u0645 \u0627\u0634\u062a\u0631\u0627\u06a9"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wUnI6
                          )}
                        >
                          {""}
                        </div>
                        <div
                          data-plasmic-name={"value3"}
                          data-plasmic-override={overrides.value3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.value3
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const miladiDate =
                                    $ctx["GET subscription_detail_Data"][0]
                                      .subscription_expiration_date;
                                  const miladiDateParts = miladiDate.split("/");
                                  const miladiYear = parseInt(
                                    miladiDateParts[2]
                                  );
                                  const miladiMonth = parseInt(
                                    miladiDateParts[0]
                                  );
                                  const miladiDay = parseInt(
                                    miladiDateParts[1]
                                  );
                                  const shamsiDate = new Date(
                                    miladiYear,
                                    miladiMonth - 1,
                                    miladiDay
                                  ).toLocaleDateString("fa-IR");
                                  return shamsiDate;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"appUrl"}
                        data-plasmic-override={overrides.appUrl}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.appUrl)}
                      >
                        <div
                          data-plasmic-name={"title4"}
                          data-plasmic-override={overrides.title4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title4
                          )}
                        >
                          {
                            "\u0622\u062f\u0631\u0633 \u0627\u06cc\u0646\u0644\u0628 \u0634\u0645\u0627"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l1YCh
                          )}
                        >
                          {""}
                        </div>
                        <div
                          data-plasmic-name={"value4"}
                          data-plasmic-override={overrides.value4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.value4
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["goToPage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return $ctx[
                                          "GET subscription_detail_Data"
                                        ][0].app_url;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToPage"] != null &&
                              typeof $steps["goToPage"] === "object" &&
                              typeof $steps["goToPage"].then === "function"
                            ) {
                              $steps["goToPage"] = await $steps["goToPage"];
                            }
                          }}
                        >
                          {"\u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"adminpanelUrl"}
                        data-plasmic-override={overrides.adminpanelUrl}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.adminpanelUrl
                        )}
                      >
                        <div
                          data-plasmic-name={"title6"}
                          data-plasmic-override={overrides.title6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title6
                          )}
                        >
                          {
                            "\u0622\u062f\u0631\u0633 \u067e\u0646\u0644 \u0645\u062f\u06cc\u0631\u06cc\u062a\u06cc \u0634\u0645\u0627"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dudjx
                          )}
                        >
                          {""}
                        </div>
                        <div
                          data-plasmic-name={"value6"}
                          data-plasmic-override={overrides.value6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.value6
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["goToPage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return $ctx[
                                          "GET subscription_detail_Data"
                                        ][0].admin_panel_url;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToPage"] != null &&
                              typeof $steps["goToPage"] === "object" &&
                              typeof $steps["goToPage"].then === "function"
                            ) {
                              $steps["goToPage"] = await $steps["goToPage"];
                            }
                          }}
                        >
                          {"\u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f"}
                        </div>
                      </Stack__>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $state.loginGetSubscriptionDetail &&
                        $state.phoneNumber.value != "" &&
                        $state.password.value != "" &&
                        $ctx["GET subscription_detail_Data"][0].response_status
                          .code != 200
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"errorMessage"}
                      data-plasmic-override={overrides.errorMessage}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.errorMessage
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $ctx["GET subscription_detail_Data"][0]
                                .response_status.code +
                              " - " +
                              $ctx["GET subscription_detail_Data"][0]
                                .response_status.detail
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $state.loginGetSubscriptionDetail &&
                        $state.phoneNumber.value != "" &&
                        $state.password.value != "" &&
                        $ctx["GET subscription_detail_Data"][0].response_status
                          .code === 200
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"paymentDetailsStack"}
                      data-plasmic-override={overrides.paymentDetailsStack}
                      className={classNames(
                        projectcss.all,
                        sty.paymentDetailsStack
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__boQkm
                        )}
                      >
                        {
                          "\u062c\u0632\u0626\u06cc\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a \u0647\u0627"
                        }
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx["GET subscription_detail_Data"][0]
                              .payment_details;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"paymentDetails"}
                            data-plasmic-override={overrides.paymentDetails}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.paymentDetails
                            )}
                            dir={"rtl"}
                            key={currentIndex}
                          >
                            <div
                              data-plasmic-name={"id"}
                              data-plasmic-override={overrides.id}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.id
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"isProforma"}
                              data-plasmic-override={overrides.isProforma}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.isProforma
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.is_proforma
                                      ? "پیش فاکتور"
                                      : "فاکتور";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"startDate"}
                              data-plasmic-override={overrides.startDate}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.startDate
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const miladiDate = new Date(
                                        currentItem.start_date
                                      );
                                      const shamsiDate =
                                        new Intl.DateTimeFormat("fa-IR").format(
                                          miladiDate
                                        );
                                      return "شروع : " + shamsiDate;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"endDate"}
                              data-plasmic-override={overrides.endDate}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.endDate
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const miladiDate = new Date(
                                        currentItem.end_date
                                      );
                                      const shamsiDate =
                                        new Intl.DateTimeFormat("fa-IR").format(
                                          miladiDate
                                        );
                                      return "پایان : " + shamsiDate;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"paid"}
                              data-plasmic-override={overrides.paid}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.paid
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.paid$
                                      ? "پرداخت شده"
                                      : "پرداخت نشده";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"totalAmount"}
                              data-plasmic-override={overrides.totalAmount}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.totalAmount
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      currentItem["total_amount (toman)"]
                                        .toString()
                                        .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"fileUrl"}
                              data-plasmic-override={overrides.fileUrl}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.fileUrl
                              )}
                              onClick={async event => {
                                const $steps = {};
                                $steps["goToPage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return currentItem.file_url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToPage"] != null &&
                                  typeof $steps["goToPage"] === "object" &&
                                  typeof $steps["goToPage"].then === "function"
                                ) {
                                  $steps["goToPage"] = await $steps["goToPage"];
                                }
                              }}
                            >
                              {
                                "\u062f\u0627\u0646\u0644\u0648\u062f \u0641\u0627\u06cc\u0644"
                              }
                            </div>
                          </Stack__>
                        );
                      })}
                    </div>
                  ) : null}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "img",
    "menuTitle",
    "mobileMenu",
    "menu",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo3",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2",
    "\u0648\u0631\u0648\u062f\u0628\u0647\u0627\u064a\u0646\u0644\u0628",
    "\u062f\u064a\u0648\u0627\u0631\u0639\u0634\u0642",
    "\u0642\u064a\u0645\u062a\u06af\u0630\u0627\u0631\u064a",
    "\u0633\u0648\u0627\u0644\u0627\u062a\u0634\u0627\u064a\u0639",
    "\u062f\u0631\u0628\u0627\u0631\u0647\u0633\u06cc\u0646\u0627\u067e\u0633",
    "inputStack",
    "phoneNumber",
    "password",
    "loginButton",
    "getSubscriptionDetail",
    "hospitalName",
    "title",
    "value",
    "hospitalSize",
    "title5",
    "value5",
    "subscriptionState",
    "title2",
    "value2",
    "paymentState",
    "title7",
    "value7",
    "subscriptionExpirationDate",
    "title3",
    "value3",
    "appUrl",
    "title4",
    "value4",
    "adminpanelUrl",
    "title6",
    "value6",
    "errorMessage",
    "paymentDetailsStack",
    "paymentDetails",
    "id",
    "isProforma",
    "startDate",
    "endDate",
    "paid",
    "totalAmount",
    "fileUrl"
  ],

  header: [
    "header",
    "img",
    "menuTitle",
    "mobileMenu",
    "menu",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo3",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2",
    "\u0648\u0631\u0648\u062f\u0628\u0647\u0627\u064a\u0646\u0644\u0628",
    "\u062f\u064a\u0648\u0627\u0631\u0639\u0634\u0642",
    "\u0642\u064a\u0645\u062a\u06af\u0630\u0627\u0631\u064a",
    "\u0633\u0648\u0627\u0644\u0627\u062a\u0634\u0627\u064a\u0639",
    "\u062f\u0631\u0628\u0627\u0631\u0647\u0633\u06cc\u0646\u0627\u067e\u0633"
  ],

  img: ["img"],
  menuTitle: ["menuTitle"],
  mobileMenu: [
    "mobileMenu",
    "menu",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo3",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2",
    "\u0648\u0631\u0648\u062f\u0628\u0647\u0627\u064a\u0646\u0644\u0628",
    "\u062f\u064a\u0648\u0627\u0631\u0639\u0634\u0642",
    "\u0642\u064a\u0645\u062a\u06af\u0630\u0627\u0631\u064a",
    "\u0633\u0648\u0627\u0644\u0627\u062a\u0634\u0627\u064a\u0639",
    "\u062f\u0631\u0628\u0627\u0631\u0647\u0633\u06cc\u0646\u0627\u067e\u0633"
  ],

  menu: [
    "menu",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo3",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2",
    "\u0648\u0631\u0648\u062f\u0628\u0647\u0627\u064a\u0646\u0644\u0628",
    "\u062f\u064a\u0648\u0627\u0631\u0639\u0634\u0642",
    "\u0642\u064a\u0645\u062a\u06af\u0630\u0627\u0631\u064a",
    "\u0633\u0648\u0627\u0644\u0627\u062a\u0634\u0627\u064a\u0639",
    "\u062f\u0631\u0628\u0627\u0631\u0647\u0633\u06cc\u0646\u0627\u067e\u0633"
  ],

  تستکنيدDemo3: [
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo3",
    "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2"
  ],

  تستکنيدDemo2: ["\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2"],
  ورودبهاينلب: [
    "\u0648\u0631\u0648\u062f\u0628\u0647\u0627\u064a\u0646\u0644\u0628"
  ],

  ديوارعشق: ["\u062f\u064a\u0648\u0627\u0631\u0639\u0634\u0642"],
  قيمتگذاري: ["\u0642\u064a\u0645\u062a\u06af\u0630\u0627\u0631\u064a"],
  سوالاتشايع: ["\u0633\u0648\u0627\u0644\u0627\u062a\u0634\u0627\u064a\u0639"],
  دربارهسیناپس: [
    "\u062f\u0631\u0628\u0627\u0631\u0647\u0633\u06cc\u0646\u0627\u067e\u0633"
  ],

  inputStack: ["inputStack", "phoneNumber", "password", "loginButton"],
  phoneNumber: ["phoneNumber"],
  password: ["password"],
  loginButton: ["loginButton"],
  getSubscriptionDetail: [
    "getSubscriptionDetail",
    "hospitalName",
    "title",
    "value",
    "hospitalSize",
    "title5",
    "value5",
    "subscriptionState",
    "title2",
    "value2",
    "paymentState",
    "title7",
    "value7",
    "subscriptionExpirationDate",
    "title3",
    "value3",
    "appUrl",
    "title4",
    "value4",
    "adminpanelUrl",
    "title6",
    "value6",
    "errorMessage",
    "paymentDetailsStack",
    "paymentDetails",
    "id",
    "isProforma",
    "startDate",
    "endDate",
    "paid",
    "totalAmount",
    "fileUrl"
  ],

  hospitalName: ["hospitalName", "title", "value"],
  title: ["title"],
  value: ["value"],
  hospitalSize: ["hospitalSize", "title5", "value5"],
  title5: ["title5"],
  value5: ["value5"],
  subscriptionState: ["subscriptionState", "title2", "value2"],
  title2: ["title2"],
  value2: ["value2"],
  paymentState: ["paymentState", "title7", "value7"],
  title7: ["title7"],
  value7: ["value7"],
  subscriptionExpirationDate: [
    "subscriptionExpirationDate",
    "title3",
    "value3"
  ],

  title3: ["title3"],
  value3: ["value3"],
  appUrl: ["appUrl", "title4", "value4"],
  title4: ["title4"],
  value4: ["value4"],
  adminpanelUrl: ["adminpanelUrl", "title6", "value6"],
  title6: ["title6"],
  value6: ["value6"],
  errorMessage: ["errorMessage"],
  paymentDetailsStack: [
    "paymentDetailsStack",
    "paymentDetails",
    "id",
    "isProforma",
    "startDate",
    "endDate",
    "paid",
    "totalAmount",
    "fileUrl"
  ],

  paymentDetails: [
    "paymentDetails",
    "id",
    "isProforma",
    "startDate",
    "endDate",
    "paid",
    "totalAmount",
    "fileUrl"
  ],

  id: ["id"],
  isProforma: ["isProforma"],
  startDate: ["startDate"],
  endDate: ["endDate"],
  paid: ["paid"],
  totalAmount: ["totalAmount"],
  fileUrl: ["fileUrl"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminConsole__ArgProps,
          internalVariantPropNames: PlasmicAdminConsole__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminConsole__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminConsole";
  } else {
    func.displayName = `PlasmicAdminConsole.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminConsole = Object.assign(
  // Top-level PlasmicAdminConsole renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    img: makeNodeComponent("img"),
    menuTitle: makeNodeComponent("menuTitle"),
    mobileMenu: makeNodeComponent("mobileMenu"),
    menu: makeNodeComponent("menu"),
    تستکنيدDemo3: makeNodeComponent(
      "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo3"
    ),
    تستکنيدDemo2: makeNodeComponent(
      "\u062a\u0633\u062a\u06a9\u0646\u064a\u062fDemo2"
    ),
    ورودبهاينلب: makeNodeComponent(
      "\u0648\u0631\u0648\u062f\u0628\u0647\u0627\u064a\u0646\u0644\u0628"
    ),
    ديوارعشق: makeNodeComponent(
      "\u062f\u064a\u0648\u0627\u0631\u0639\u0634\u0642"
    ),
    قيمتگذاري: makeNodeComponent(
      "\u0642\u064a\u0645\u062a\u06af\u0630\u0627\u0631\u064a"
    ),
    سوالاتشايع: makeNodeComponent(
      "\u0633\u0648\u0627\u0644\u0627\u062a\u0634\u0627\u064a\u0639"
    ),
    دربارهسیناپس: makeNodeComponent(
      "\u062f\u0631\u0628\u0627\u0631\u0647\u0633\u06cc\u0646\u0627\u067e\u0633"
    ),
    inputStack: makeNodeComponent("inputStack"),
    phoneNumber: makeNodeComponent("phoneNumber"),
    password: makeNodeComponent("password"),
    loginButton: makeNodeComponent("loginButton"),
    getSubscriptionDetail: makeNodeComponent("getSubscriptionDetail"),
    hospitalName: makeNodeComponent("hospitalName"),
    title: makeNodeComponent("title"),
    value: makeNodeComponent("value"),
    hospitalSize: makeNodeComponent("hospitalSize"),
    title5: makeNodeComponent("title5"),
    value5: makeNodeComponent("value5"),
    subscriptionState: makeNodeComponent("subscriptionState"),
    title2: makeNodeComponent("title2"),
    value2: makeNodeComponent("value2"),
    paymentState: makeNodeComponent("paymentState"),
    title7: makeNodeComponent("title7"),
    value7: makeNodeComponent("value7"),
    subscriptionExpirationDate: makeNodeComponent("subscriptionExpirationDate"),
    title3: makeNodeComponent("title3"),
    value3: makeNodeComponent("value3"),
    appUrl: makeNodeComponent("appUrl"),
    title4: makeNodeComponent("title4"),
    value4: makeNodeComponent("value4"),
    adminpanelUrl: makeNodeComponent("adminpanelUrl"),
    title6: makeNodeComponent("title6"),
    value6: makeNodeComponent("value6"),
    errorMessage: makeNodeComponent("errorMessage"),
    paymentDetailsStack: makeNodeComponent("paymentDetailsStack"),
    paymentDetails: makeNodeComponent("paymentDetails"),
    id: makeNodeComponent("id"),
    isProforma: makeNodeComponent("isProforma"),
    startDate: makeNodeComponent("startDate"),
    endDate: makeNodeComponent("endDate"),
    paid: makeNodeComponent("paid"),
    totalAmount: makeNodeComponent("totalAmount"),
    fileUrl: makeNodeComponent("fileUrl"),
    // Metadata about props expected for PlasmicAdminConsole
    internalVariantProps: PlasmicAdminConsole__VariantProps,
    internalArgProps: PlasmicAdminConsole__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "admin console",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminConsole;
/* prettier-ignore-end */
