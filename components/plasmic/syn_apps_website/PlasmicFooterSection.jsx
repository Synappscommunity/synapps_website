/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqCYb2b7hLWP5fdSvXKe7g
// Component: 9AUvb_VWiKJR
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: qDkIQgIGzzHX/component
import TextInput from "../../TextInput"; // plasmic-import: H5mAYWyWYBfw/component
import { useScreenVariants as useScreenVariantsunNaIs43VvNf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UNNaIS43VvNF/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vqCYb2b7hLWP5fdSvXKe7g/projectcss
import sty from "./PlasmicFooterSection.module.css"; // plasmic-import: 9AUvb_VWiKJR/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jjQ9fZu8jJX0/icon
import TelegramSvgrepoComSvgIcon from "./icons/PlasmicIcon__TelegramSvgrepoComSvg"; // plasmic-import: fMuaxndELgXl/icon
import InstagramSvgIcon from "./icons/PlasmicIcon__InstagramSvg"; // plasmic-import: fNYP6iSctaF1/icon
import LinkedinSvgIcon from "./icons/PlasmicIcon__LinkedinSvg"; // plasmic-import: Xi7XE3hyjyJT/icon

createPlasmicElementProxy;

export const PlasmicFooterSection__VariantProps = new Array();

export const PlasmicFooterSection__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooterSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsunNaIs43VvNf()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"section1"}
        data-plasmic-override={overrides.section1}
        hasGap={true}
        className={classNames(projectcss.all, sty.section1)}
      >
        <div
          data-plasmic-name={"footerLogoSocialPhone"}
          data-plasmic-override={overrides.footerLogoSocialPhone}
          className={classNames(projectcss.all, sty.footerLogoSocialPhone)}
        >
          <PlasmicImg__
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            alt={""}
            className={classNames(sty.logo)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobile") ? "auto" : "100%"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/syn_apps_website/images/image2Png2.png",
              fullWidth: 296,
              fullHeight: 104,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bLnXn
            )}
          >
            {
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"
            }
          </div>
          <div
            data-plasmic-name={"phone"}
            data-plasmic-override={overrides.phone}
            className={classNames(projectcss.all, sty.phone)}
          >
            <IconIcon
              className={classNames(projectcss.all, sty.svg__zeRz3)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__b13Wt
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{
                    color: "var(--token-Jf9kqXAINH8P)",
                    fontWeight: 700
                  }}
                >
                  {"09120767392"}
                </span>
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"socialMedia"}
            data-plasmic-override={overrides.socialMedia}
            className={classNames(projectcss.all, sty.socialMedia)}
          >
            <TelegramSvgrepoComSvgIcon
              data-plasmic-name={"telegram"}
              data-plasmic-override={overrides.telegram}
              className={classNames(projectcss.all, sty.telegram)}
              onClick={async event => {
                const $steps = {};
                $steps["goToTelegram"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://t.me/SynappsOfficial"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToTelegram"] != null &&
                  typeof $steps["goToTelegram"] === "object" &&
                  typeof $steps["goToTelegram"].then === "function"
                ) {
                  $steps["goToTelegram"] = await $steps["goToTelegram"];
                }
              }}
              role={"img"}
            />

            <InstagramSvgIcon
              className={classNames(projectcss.all, sty.svg__mnxa)}
              role={"img"}
            />

            <LinkedinSvgIcon
              className={classNames(projectcss.all, sty.svg__rHwgD)}
              onClick={async event => {
                const $steps = {};
                $steps["goToLinkedin"] = true
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "https://www.linkedin.com/company/synappsgroup/"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLinkedin"] != null &&
                  typeof $steps["goToLinkedin"] === "object" &&
                  typeof $steps["goToLinkedin"].then === "function"
                ) {
                  $steps["goToLinkedin"] = await $steps["goToLinkedin"];
                }
              }}
              role={"img"}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__wJ3Pu)}>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__liKxd
            )}
          >
            {"Menu"}
          </h4>
          <Button
            className={classNames("__wab_instance", sty.button___55I1H)}
            color={"footerButton"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__nkwm)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__fzCug)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sdRDg
              )}
            >
              {"How it work"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___867S)}
            color={"footerButton"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__eLpXp)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__afPmA)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zJcf5
              )}
            >
              {"Pricing"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___5IoBh)}
            color={"footerButton"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__yNeje)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___8OgXh)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w6U85
              )}
            >
              {"FAQs"}
            </div>
          </Button>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__xgvaA)}>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__ndLIg
            )}
          >
            {"Help"}
          </h4>
          <Button
            className={classNames("__wab_instance", sty.button__dzfFy)}
            color={"footerButton"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___6Wyko)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__hsWoO)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jMYbj
              )}
            >
              {"Privacy and Policy"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___7Kgey)}
            color={"footerButton"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__oNGul)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__pwGxf)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__droMw
              )}
            >
              {"Terms of Use"}
            </div>
          </Button>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___8PM5S)}>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__tDzUz
            )}
          >
            {"Company"}
          </h4>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vvOjx
            )}
          >
            {"Lorem ipsum dolor sit amet, consectetur."}
          </div>
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
          />

          <Button
            className={classNames("__wab_instance", sty.button__v6Xg)}
            color={"white"}
            small={
              hasVariant(globalVariants, "screen", "mobile") ? true : undefined
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jixt7
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Subscribe"
                : "Subscribe"}
            </div>
          </Button>
        </div>
      </Stack__>
      <div
        data-plasmic-name={"section2"}
        data-plasmic-override={overrides.section2}
        className={classNames(projectcss.all, sty.section2)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jtrjs
          )}
        >
          {hasVariant(globalVariants, "screen", "mobile") ? (
            <React.Fragment>
              <React.Fragment>
                {
                  "\u062a\u0645\u0627\u0645\u06cc \u062d\u0642\u0648\u0642 \u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a \u0645\u062a\u0639\u0644\u0642 \u0628\u0647\n "
                }
              </React.Fragment>
              {
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link
                  )}
                  component={Link}
                  href={
                    "https://rasmio.com/company/14008652910/%D8%B4%D8%B1%DA%A9%D8%AA%20%D8%B3%D8%B1%D9%88%D8%B4%20%D9%81%D9%86%D8%A7%D9%88%D8%B1%DB%8C%20%D8%A2%D8%AA%DB%8C%D9%87/"
                  }
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecorationLine: "underline" }}
                      >
                        {
                          "\u0634\u0631\u06a9\u062a \u062f\u0627\u0646\u0634 \u0628\u0646\u06cc\u0627\u0646 \u00ab \u0633\u0631\u0648\u0634 \u0641\u0646\u0627\u0648\u0631\u06cc \u0622\u062a\u06cc\u0647 \u00bb"
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecorationLine: "underline" }}
                      >
                        {
                          "\u0634\u0631\u06a9\u062a \u062f\u0627\u0646\u0634 \u0628\u0646\u06cc\u0627\u0646 \u00ab \u0633\u0631\u0648\u0634 \u0641\u0646\u0627\u0648\u0631\u06cc \u0622\u062a\u06cc\u0647 \u00bb"
                        }
                      </span>
                    </React.Fragment>
                  )}
                </PlasmicLink__>
              }
              <React.Fragment>
                {" \u0645\u06cc \u0628\u0627\u0634\u062f"}
              </React.Fragment>
            </React.Fragment>
          ) : (
            <React.Fragment>
              <React.Fragment>
                {
                  "\u062a\u0645\u0627\u0645\u06cc \u062d\u0642\u0648\u0642 \u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a \u0645\u062a\u0639\u0644\u0642 \u0628\u0647 "
                }
              </React.Fragment>
              {
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link
                  )}
                  component={Link}
                  href={
                    "https://rasmio.com/company/14008652910/%D8%B4%D8%B1%DA%A9%D8%AA%20%D8%B3%D8%B1%D9%88%D8%B4%20%D9%81%D9%86%D8%A7%D9%88%D8%B1%DB%8C%20%D8%A2%D8%AA%DB%8C%D9%87/"
                  }
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecorationLine: "underline" }}
                      >
                        {
                          "\u0634\u0631\u06a9\u062a \u062f\u0627\u0646\u0634 \u0628\u0646\u06cc\u0627\u0646 \u00ab \u0633\u0631\u0648\u0634 \u0641\u0646\u0627\u0648\u0631\u06cc \u0622\u062a\u06cc\u0647 \u00bb"
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecorationLine: "underline" }}
                      >
                        {
                          "\u0634\u0631\u06a9\u062a \u062f\u0627\u0646\u0634 \u0628\u0646\u06cc\u0627\u0646 \u00ab \u0633\u0631\u0648\u0634 \u0641\u0646\u0627\u0648\u0631\u06cc \u0622\u062a\u06cc\u0647 \u00bb"
                        }
                      </span>
                    </React.Fragment>
                  )}
                </PlasmicLink__>
              }
              <React.Fragment>
                {" \u0645\u06cc \u0628\u0627\u0634\u062f."}
              </React.Fragment>
            </React.Fragment>
          )}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section1",
    "footerLogoSocialPhone",
    "logo",
    "phone",
    "socialMedia",
    "telegram",
    "textInput",
    "section2",
    "link"
  ],

  section1: [
    "section1",
    "footerLogoSocialPhone",
    "logo",
    "phone",
    "socialMedia",
    "telegram",
    "textInput"
  ],

  footerLogoSocialPhone: [
    "footerLogoSocialPhone",
    "logo",
    "phone",
    "socialMedia",
    "telegram"
  ],

  logo: ["logo"],
  phone: ["phone"],
  socialMedia: ["socialMedia", "telegram"],
  telegram: ["telegram"],
  textInput: ["textInput"],
  section2: ["section2", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooterSection__ArgProps,
          internalVariantPropNames: PlasmicFooterSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection";
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section1: makeNodeComponent("section1"),
    footerLogoSocialPhone: makeNodeComponent("footerLogoSocialPhone"),
    logo: makeNodeComponent("logo"),
    phone: makeNodeComponent("phone"),
    socialMedia: makeNodeComponent("socialMedia"),
    telegram: makeNodeComponent("telegram"),
    textInput: makeNodeComponent("textInput"),
    section2: makeNodeComponent("section2"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps
  }
);

export default PlasmicFooterSection;
/* prettier-ignore-end */
